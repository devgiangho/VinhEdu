@model IEnumerable<VinhEdu.ViewModels.StudentList>
@{
    ViewBag.Title = "Lớp chủ nhiệm";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@Html.Partial("_PartialGrid")
<div class="card  mt-3">
    <div class="card-header">
        <div class="row">
            <div class="col-md-2">
                Học sinh lớp chủ nhiệm
            </div>
            <div class="col-md-4">
                <button class="btn btn-outline-warning" onclick="sendMessage()">Gửi tin nhắn báo điểm</button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table id="lstPost" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Học sinh</th>
                    <th>Giới tính</th>
                    <th>Ngày sinh</th>
                    @*<th>Hành động</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <p>@item.ID</p>
                        </td>
                        <td>
                            <p>@item.FullName</p>
                        </td>
                        <td>
                            @item.Gender.GetDisplayName()
                        </td>
                        <td>
                            @item.DateOfBirth.ToString("dd/MM/yyyy")
                        </td>
                        @*<td>
                                <span class="badge badge-info" style="cursor:pointer" onclick="openContact(@ViewBag.ClassID,@item.ID,'@item.FullName')">
                                    Gửi tin nhắn
                                </span>
                            </td>*@
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th>ID</th>
                    <th>Học sinh</th>
                    <th>Giới tính</th>
                    <th>Ngày sinh</th>
                    @*<th>Hành động</th>*@
                </tr>
            </tfoot>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        Tên học sinh:
        <input name="studentName" id="studentName" class="form-control" type="text" placeholder="Tên học sinh" />
    </div>
    <div class="col-md-4 mt-4">
        <button class="btn btn-outline-success" onclick="searchByName()">Tìm kiếm</button>
    </div>
</div>
<div class="card-header">
    Bảng điểm học kỳ 1:
</div>
<div id="myGrid" style="height: 400px;width:100%;" class="ag-theme-balham"></div>
<div class="card-header">
    Bảng điểm học kỳ 2:
</div>
<div id="myGrid2" style="height: 400px;width:100%;" class="ag-theme-balham"></div>
<script src="~/Content/AdminLTE/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Content/AdminLTE/plugins/datatables/dataTables.bootstrap4.min.js"></script>
<script>
    $(function () {
        $("#lstPost").DataTable();
    });
</script>
<script>
    //LIST SUBJECT
    var subjectList = [];
    // specify the columns
    var columnDefs = [
        { headerName: "StudentID", field: "StudentID", hide: true, editable: false, resizable: true },
        { headerName: "Học sinh", field: "StudentName", editable: false, resizable: true, },
    ];

    // specify the data
    var rowData = [];

    // let the grid know which columns and what data to use
    var gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        rowSelection: 'single',
        headerHeight: '28px'
    };
    // lookup the container we want the Grid to use
    var eGridDiv = document.querySelector('#myGrid');

    // specify the data
    var rowData2 = [];

    // let the grid know which columns and what data to use
    var gridOptions2 = {
        columnDefs: columnDefs,
        rowData: rowData2,
        rowSelection: 'single',
        headerHeight: '28px'
    };
    // lookup the container we want the Grid to use
    var eGridDiv2 = document.querySelector('#myGrid2');

    $(document).ready(function () {
        extractData();
    });
    function extractData() {
        axios.get('/Teacher/GetSubjectInstance').then(resp => {
            let data = resp.data;
            let coldef = { editable: false, resizable: true, width: 45 }
            data.forEach((item) => {
                let column = {
                    headerName: item.SubjectName,
                    field: item.SubjectID,
                    resizable: true,
                    children: [
                        {
                            headerName: "M1",
                            field: "S" + item.SubjectID + "Score.M1",
                            ...coldef
                        },
                        {
                            headerName: "M2",
                            field: "S" + item.SubjectID + "Score.M2",
                            ...coldef
                        },
                        {
                            headerName: "M3",
                            field: "S" + item.SubjectID + "Score.M3",
                            ...coldef
                        },
                        {
                            headerName: "M4",
                            field: "S" + item.SubjectID + "Score.M4",
                            ...coldef
                        },
                        {
                            headerName: "P1",
                            field: "S" + item.SubjectID + "Score.P1",
                            ...coldef
                        },
                        {
                            headerName: "P2",
                            field: "S" + item.SubjectID + "Score.P2",
                            ...coldef
                        },
                        {
                            headerName: "P3",
                            field: "S" + item.SubjectID + "Score.P3",
                            ...coldef
                        },
                        {
                            headerName: "T1",
                            field: "S" + item.SubjectID + "Score.T1",
                            ...coldef
                        },
                        {
                            headerName: "T2",
                            field: "S" + item.SubjectID + "Score.T2",
                            ...coldef
                        },
                        {
                            headerName: "T3",
                            field: "S" + item.SubjectID + "Score.T3",
                            ...coldef
                        },
                        {
                            headerName: "K1",
                            field: "S" + item.SubjectID + "Score.K1",
                            ...coldef
                        }
                    ]
                }
                columnDefs.push(column);
                subjectList.push(item);
            });
            GetAllScore();
        });
    }
    function GetAllScore() {
        axios.post('/Teacher/GetHomeClassScoreBoard', { semester: 1 }).then(resp => {
            let data = resp.data;
            if (data) {
                data.forEach((item) => {
                    let newRow = {};
                    newRow.StudentID = item.StudentID;
                    newRow.StudentName = item.StudentName;
                    subjectList.forEach((s) => {
                        item.SubjectScores.forEach((score) => {
                            if (score.SubjectID == s.SubjectID) {
                                newRow = { ...newRow, [`S${s.SubjectID}Score`]: score.Score }
                            }
                        });
                    });
                    rowData.push(newRow);
                });
                new agGrid.Grid(eGridDiv, gridOptions);
                getHK2();
            }

        });

    }
    function getHK2() {
        axios.post('/Teacher/GetHomeClassScoreBoard', { semester: 2 }).then(resp => {
            let data = resp.data;
            if (data) {
                data.forEach((item) => {
                    let newRow = {};
                    newRow.StudentID = item.StudentID;
                    newRow.StudentName = item.StudentName;
                    subjectList.forEach((s) => {
                        item.SubjectScores.forEach((score) => {
                            if (score.SubjectID == s.SubjectID) {
                                newRow = { ...newRow, [`S${s.SubjectID}Score`]: score.Score }
                            }
                        });
                    });
                    rowData2.push(newRow);
                });
                new agGrid.Grid(eGridDiv2, gridOptions2);
            }
        });
    }
</script>
<script>
    let storeObj = {
        classID: '@ViewBag.ClassID',
    };
    function sendMessage() {
        $('#overlay').fadeIn();
        swal({
            title: "Bạn chắc chứ ?",
            text: "Bạn có chắc muốn gửi tin nhắn thông báo có điểm",
            icon: "warning",
            buttons: true,
            dangerMode: false,
        }).then((willDelete) => {
            if (willDelete) {
                axios.post('/Teacher/SendContact', { classID: storeObj.classID}).then(resp => {
                    let data = resp.data;
                    if (data.success) {
                        swal('Thành công', data.message, 'success');
                        $('#overlay').fadeOut();
                    }
                    else {
                        swal('Lỗi', 'Lỗi hệ thống', 'error');
                        $('#overlay').fadeOut();
                    }
                }).catch((e) => {
                    $('#overlay').fadeOut();
                    swal('Lỗi', 'Lỗi hệ thống', 'error');
                })
            } else {
                $('#overlay').fadeOut();
            }
        });

    }
    function searchByName() {
        let name = $('#studentName').val();
        axios.post('/Teacher/GetHomeClassScoreBoardByName', {semester: 1, name: name }).then(resp => {
            let data = resp.data;
            gridOptions.api.setRowData([]);
            if (data) {
                data.forEach((item) => {
                    let newRow = {};
                    newRow.StudentID = item.StudentID;
                    newRow.StudentName = item.StudentName;
                    subjectList.forEach((s) => {
                        item.SubjectScores.forEach((score) => {
                            if (score.SubjectID == s.SubjectID) {
                                newRow = { ...newRow, [`S${s.SubjectID}Score`]: score.Score }
                            }
                        });
                    });
                    gridOptions.api.updateRowData({ add: [newRow] });
                });
                //hk2
                axios.post('/Teacher/GetHomeClassScoreBoardByName', {semester: 2, name: name }).then(resp => {
                    let data = resp.data;
                    gridOptions2.api.setRowData([]);
                    if (data) {
                        data.forEach((item) => {
                            let newRow = {};
                            newRow.StudentID = item.StudentID;
                            newRow.StudentName = item.StudentName;
                            subjectList.forEach((s) => {
                                item.SubjectScores.forEach((score) => {
                                    if (score.SubjectID == s.SubjectID) {
                                        newRow = { ...newRow, [`S${s.SubjectID}Score`]: score.Score }
                                    }
                                });
                            });
                            gridOptions2.api.updateRowData({ add: [newRow] });
                        });


                    }
                });
            }

        });
    }
</script>