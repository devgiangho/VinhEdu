@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@Html.Partial("_PartialGrid")
<div class="container-fluid" style="margin-top:15px;padding-top:15px;">
    <h3>Quản lý điểm lớp @ViewBag.ClassName - @ViewBag.Semester - môn @ViewBag.SubjectName</h3>
    <div class="card-header">
        <div class="row">
            <div class="col-md-4">
                Tên học sinh:
                <input oninput="searchByName()" name="studentName" id="studentName" class="form-control" type="text" placeholder="Tên học sinh" />
            </div>
            <div class="col-md-2 mt-4">
                <button class="btn btn-outline-warning float-right" onclick="Submit()">Cập nhật</button>
            </div>
        </div>  
    </div>
    <input type="hidden" id="ClassID" value="@ViewBag.ClassID"/>
    <div id="myGrid" style="height: 400px;width:100%;" class="ag-theme-balham"></div>

</div>

<script>
    // specify the columns
    var columnDefs = [
        { headerName: "StudentID", field: "StudentID", hide: true, editable: false, resizable: true },
        { headerName: "Học sinh", field: "StudentName", editable: false, resizable: true,suppressSizeToFit: true },
        {
            headerName: "M1",
            field: "Score.M1",
            editable: true, resizable: true,
        },
        {
            headerName: "M2",
            field: "Score.M2",
            editable: true, resizable: true,
        },
        {
            headerName: "M3",
            field: "Score.M3",
            editable: true, resizable: true,
        },
        {
            headerName: "M4",
            field: "Score.M4",
            editable: true, resizable: true,
        },
        {
            headerName: "P1",
            field: "Score.P1",
           editable: true, resizable: true,
        },
        {
            headerName: "P2",
            field: "Score.P2",
            editable: true, resizable: true,
        },
        {
            headerName: "P3",
            field: "Score.P3",
            editable: true, resizable: true,
        },
        {
            headerName: "T1",
            field: "Score.T1",
            editable: true, resizable: true,
        },
        {
            headerName: "T2",
            field: "Score.T2",
            editable: true, resizable: true,
        },
        {
            headerName: "T3",
            field: "Score.T3",
            editable: true, resizable: true,
        },
        {
            headerName: "K1",
            field: "Score.K1",
            editable: true, resizable: true,
        },
        {
            headerName: "T.Kết",
            field: "Score.TK",
            editable: false, resizable: true,
        },
    ];

    // specify the data
    var rowData = [];

    // let the grid know which columns and what data to use
    var gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        rowSelection: 'single',
        headerHeight: '28px'
    };
    // lookup the container we want the Grid to use
    var eGridDiv = document.querySelector('#myGrid');

    // create the grid passing in the div to use together with the columns & data we want to use
    new agGrid.Grid(eGridDiv, gridOptions);
</script>
<script>
    var ClassID = $('#ClassID').val();
    var Mark = {
        StudentID: -1,
        StudentName: '',
        Score: {
            M1: -1,
            M2: -1,
            M3: -1,
            M4: -1,
            P1: 'x',
            P2: 'x',
            P3: 'x',
            T1: -1,
            T2: -1,
            T3: -1,
            K1: -1,
        }
    };
    $(document).ready(function () {
        GetData();
    });
    function GetData() {
        ClassID = $('#ClassID').val();
        axios.get('/Teacher/GetStudentMark?ClassID=' + ClassID).then(resp => {
            ClearData();
            resp.data.forEach((e) => {
                let hs = {
                    ...e, Score: e.Score ? e.Score : {
                        M1: 'x',
                        M2: 'x',
                        M3: 'x',
                        M4: 'x',
                        P1: 'x',
                        P2: 'x',
                        P3: 'x',
                        T1: 'x',
                        T2: 'x',
                        T3: 'x',
                        K1: 'x',
                        TK: 'x',
                    }
                };
                let finalScore = caculateScore(hs.Score);
                hs.Score.TK = finalScore;
                gridOptions.api.updateRowData({ add: [hs] });
            });
            gridOptions.api.sizeColumnsToFit();
        }).catch((e) => {
            swal('Lỗi', 'Lỗi hệ thống', 'error');
        })
    }
    function ClearData() {
        gridOptions.api.setRowData([]);
    }
    function Submit() {
        $('#overlay').fadeIn();
        axios.post('/Teacher/UpdateStudentMark', { ClassID: ClassID, Listmark: getAllRows() }).then(resp => {
            let data = resp.data;
            if (data.Success) {
                $('#overlay').fadeOut();
                swal('Thành công', data.Message, 'success');
                ClearData();
                data.Member.forEach((e) => {
                let hs = {
                    ...e, Score: e.Score ? e.Score : {
                        M1: 'x',
                        M2: 'x',
                        M3: 'x',
                        M4: 'x',
                        P1: 'x',
                        P2: 'x',
                        P3: 'x',
                        T1: 'x',
                        T2: 'x',
                        T3: 'x',
                        K1: 'x',
                        TK: 'x',
                    }
                };
                let finalScore = caculateScore(hs.Score);
                hs.Score.TK = finalScore;
                gridOptions.api.updateRowData({ add: [hs] });
            });
            }
            else {
                $('#overlay').fadeOut();
                swal('Thất bại',data.Message,'warning')
            }
        })
    }
    function getAllRows() {
        let rowData = [];
        gridOptions.api.forEachNode(node => rowData.push(node.data));
        return rowData;
    }
    /*
     * Hàm tính điểm tổng kết, làm tròn 2 con số
     */
    function caculateScore(score) {
        let tk = 'x'
        checkM = score.M1 != 'x' || score.M2 != 'x'|| score.M3  != 'x' || score.M4 != 'x';
        checkP = score.P1 != 'x'&& score.P2 != 'x' && score.P3 != 'x';
        checkT = score.T1 != 'x' && score.T2 != 'x' && score.T3 != 'x';
        checkHK = score.K1 != 'x';

        if (checkHK && checkM && checkP && checkT) {
            let x1Score = [score.M1, score.M2, score.M3, score.M4, score.P1, score.P2, score.P3];
            let x2Score = [score.T1, score.T2, score.T3];
            let scoreCount = 0;
            const reducer = (accumulator, currentValue) => {
                if (currentValue != 'x') {
                    //hệ số 1
                    scoreCount++;
                    return parseFloat(currentValue) + accumulator;
                }
                return accumulator;
            };
            const reducer2 = (accumulator, currentValue) => {
                if (currentValue != 'x') {
                    //hệ số 2
                    scoreCount += 2;
                    return (parseFloat(currentValue) * 2) + accumulator;
                }
                return accumulator;
            };
            let countX1 = x1Score.reduce(reducer, 0);
            let countX2 = x2Score.reduce(reducer2, 0);
            tk = countX1 + countX2 + (parseFloat(score.K1) * 3);
            scoreCount += 3; // hệ số điểm học kì
            return (parseFloat(tk) / scoreCount).toFixed(2);
        }
        return 'x';
    }
    
</script>
<script>
    function searchByName() {
        ClassID = $('#ClassID').val();
        let name = $('#studentName').val();
        axios.post('/Teacher/GetStudentMarkByName', { ClassID: ClassID,name: name }).then(resp => {
            ClearData();
            resp.data.forEach((e) => {
                let hs = {
                    ...e, Score: e.Score ? e.Score : {
                        M1: 'x',
                        M2: 'x',
                        M3: 'x',
                        M4: 'x',
                        P1: 'x',
                        P2: 'x',
                        P3: 'x',
                        T1: 'x',
                        T2: 'x',
                        T3: 'x',
                        K1: 'x',
                        TK: 'x',
                    }
                };
                let finalScore = caculateScore(hs.Score);
                hs.Score.TK = finalScore;
                gridOptions.api.updateRowData({ add: [hs] });
            });
            gridOptions.api.sizeColumnsToFit();
        }).catch((e) => {
            swal('Lỗi', 'Lỗi hệ thống', 'error');
        })
    }
</script>