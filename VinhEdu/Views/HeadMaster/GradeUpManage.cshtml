
@{
    ViewBag.Title = "Quản lý xét điểm lên lớp";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@Html.Partial("_PartialGrid")
<div class="card-header">
    Quản lý xét điểm lên lớp - lớp @ViewBag.ClassName
</div>
<div class="card-header">
    Bảng điểm học kỳ 1:
</div>
<div id="myGrid" style="height: 300px;width:100%;" class="ag-theme-balham"></div>
<div class="card-header">
    Bảng điểm học kỳ 2:
</div>
<div id="myGrid2" style="height: 300px;width:100%;" class="ag-theme-balham"></div>
<hr />
<div id="gradeUp" class="d-none">
    <div class="title">
        Xét lên lớp: <button class="hidden btn btn-danger float-right " id="btnUpdate" onclick="updateGradeUpStatus()">Cập nhật trạng thái</button>
    </div>
    <table class="table table-striped" id="table">
    </table>
</div>
<script>
    const classID = @ViewBag.ClassID;
    const semester = "@ViewBag.Semester";
</script>
<script>
    let studentToGradeUp = [];
    //LIST SUBJECT
    var subjectList = [];
    // specify the columns
    var columnDefs = [
        { headerName: "StudentID", field: "StudentID", hide: true, editable: false, resizable: true },
        { headerName: "Học sinh", field: "StudentName", editable: false, resizable: true, },
        { headerName: "Tổng Kết", field: "finalScore", editable: false, resizable: true, width: 80 },
    ];

    // specify the data
    var rowData = [];

    // let the grid know which columns and what data to use
    var gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        rowSelection: 'single',
        headerHeight: '28px'
    };
    // lookup the container we want the Grid to use
    var eGridDiv = document.querySelector('#myGrid');

    // specify the data
    var rowData2 = [];

    // let the grid know which columns and what data to use
    var gridOptions2 = {
        columnDefs: columnDefs,
        rowData: rowData2,
        rowSelection: 'single',
        headerHeight: '28px'
    };
    // lookup the container we want the Grid to use
    var eGridDiv2 = document.querySelector('#myGrid2');

    $(document).ready(function () {
        extractData();
    });
    function extractData() {
        axios.get('/Teacher/GetSubjectInstance').then(resp => {
            let data = resp.data;
            let coldef = { editable: false, resizable: true, width: 50 }
            data.forEach((item) => {
                let column = {
                    headerName: item.SubjectName,
                    field: item.SubjectID,
                    resizable: true,
                    children: [
                        {
                            headerName: "M1",
                            field: "S" + item.SubjectID + "Score.M1",
                            ...coldef
                        },
                        {
                            headerName: "M2",
                            field: "S" + item.SubjectID + "Score.M2",
                            ...coldef
                        },
                        {
                            headerName: "M3",
                            field: "S" + item.SubjectID + "Score.M3",
                            ...coldef
                        },
                        {
                            headerName: "M4",
                            field: "S" + item.SubjectID + "Score.M4",
                            ...coldef
                        },
                        {
                            headerName: "P1",
                            field: "S" + item.SubjectID + "Score.P1",
                            ...coldef
                        },
                        {
                            headerName: "P2",
                            field: "S" + item.SubjectID + "Score.P2",
                            ...coldef
                        },
                        {
                            headerName: "P3",
                            field: "S" + item.SubjectID + "Score.P3",
                            ...coldef
                        },
                        {
                            headerName: "T1",
                            field: "S" + item.SubjectID + "Score.T1",
                            ...coldef
                        },
                        {
                            headerName: "T2",
                            field: "S" + item.SubjectID + "Score.T2",
                            ...coldef
                        },
                        {
                            headerName: "T3",
                            field: "S" + item.SubjectID + "Score.T3",
                            ...coldef
                        },
                        {
                            headerName: "K1",
                            field: "S" + item.SubjectID + "Score.K1",
                            ...coldef
                        },
                        {
                            headerName: "TK",
                            field: "S" + item.SubjectID + "Score.TK",
                            ...coldef
                        }
                    ]
                }
                columnDefs.push(column);
                subjectList.push(item);
            });
            //columnDefs.push(colTK);
            GetAllScore();
        });
    }
    function GetAllScore() {
        axios.post('/HeadMaster/GetStudentClassMark', { classID: classID, semester: 1 }).then(resp => {
            let data = resp.data;
            if (data) {
                data.forEach((item) => {
                    let newRow = {};
                    let countTK = 0;
                    newRow.StudentID = item.StudentID;
                    newRow.StudentName = item.StudentName;
                    subjectList.forEach((s) => {
                        item.SubjectScores.forEach((score) => {
                            if (score.SubjectID == s.SubjectID) {
                                score.Score.TK = caculateScore(score.Score);
                                if (score.Score.TK != 'x') {
                                    countTK++;
                                }
                                newRow = { ...newRow, [`S${s.SubjectID}Score`]: score.Score }
                            }
                        });
                    });
                    //Tính điểm tổng kết tất cả các môn
                    //Đủ điểm tổng kết các môn mới tính
                    if (subjectList.length == countTK) {
                        let finalScoreTK = caculateFinalScore(item.SubjectScores);
                        newRow.finalScore = finalScoreTK;
                        studentToGradeUp.push({
                            studentID: item.StudentID,
                            studentName: item.StudentName,
                            canGradeUp: checkAbleToGradeUp(item.SubjectScores),
                        })
                    }
                    else {
                        studentToGradeUp.push({
                            studentID: item.StudentID,
                            studentName: item.StudentName,
                            canGradeUp: false,
                        })
                    }
                    rowData.push(newRow);
                });
                new agGrid.Grid(eGridDiv, gridOptions);
                getHK2();
            }

        });

    }
    /*
     * Lấy điểm học kì 2
     * */
    function getHK2() {
        axios.post('/HeadMaster/GetStudentClassMark', { classID: classID, semester: 2 }).then(resp => {
            let data = resp.data;
            if (data) {
                data.forEach((item) => {
                    let newRow = {};
                    let countTK = 0;
                    newRow.StudentID = item.StudentID;
                    newRow.StudentName = item.StudentName;
                    subjectList.forEach((s) => {
                        item.SubjectScores.forEach((score) => {
                            if (score.SubjectID == s.SubjectID) {
                                score.Score.TK = caculateScore(score.Score);
                                if (score.Score.TK != 'x') {
                                    countTK++;
                                }
                                newRow = { ...newRow, [`S${s.SubjectID}Score`]: score.Score }
                            }
                        });
                    });
                    //Tính điểm tổng kết tất cả các môn
                    //Đủ điểm tổng kết các môn mới tính
                    if (subjectList.length == countTK) {
                        let finalScoreTK = caculateFinalScore(item.SubjectScores);
                        newRow.finalScore = finalScoreTK;
                        let x = checkAbleToGradeUp(item.SubjectScores);
                        if (x == false) {
                            let objIndex = studentToGradeUp.findIndex((obj => obj.id == 1));
                            studentToGradeUp[objIndex].x = false;
                        }
                    }
                    else {
                        let objIndex = studentToGradeUp.findIndex((obj => obj.id == 1));
                        studentToGradeUp[objIndex].x = false;
                    }
                    rowData2.push(newRow);

                });
                new agGrid.Grid(eGridDiv2, gridOptions2);
                if (semester == "HK2") {
                    constructTable('#table');
                    $('#gradeUp').removeClass("d-none");
                    $('#btnUpdate').removeClass("d-none");
                }
                
            }
        });
    }
    /*
     * Hàm tính điểm tổng kết, làm tròn 2 con số
     */
    function caculateScore(score) {
        let tk = 'x'
        checkM = score.M1 != 'x' || score.M2 != 'x' || score.M3 != 'x' || score.M4 != 'x';
        checkP = score.P1 != 'x' && score.P2 != 'x' && score.P3 != 'x';
        checkT = score.T1 != 'x' && score.T2 != 'x' && score.T3 != 'x';
        checkHK = score.K1 != 'x';

        if (checkHK && checkM && checkP && checkT) {
            let x1Score = [score.M1, score.M2, score.M3, score.M4, score.P1, score.P2, score.P3];
            let x2Score = [score.T1, score.T2, score.T3];
            let scoreCount = 0;
            const reducer = (accumulator, currentValue) => {
                if (currentValue != 'x') {
                    //hệ số 1
                    scoreCount++;
                    return parseFloat(currentValue) + accumulator;
                }
                return accumulator;
            };
            const reducer2 = (accumulator, currentValue) => {
                if (currentValue != 'x') {
                    //hệ số 2
                    scoreCount += 2;
                    return (parseFloat(currentValue) * 2) + accumulator;
                }
                return accumulator;
            };
            let countX1 = x1Score.reduce(reducer, 0);
            let countX2 = x2Score.reduce(reducer2, 0);
            tk = countX1 + countX2 + (parseFloat(score.K1) * 3);
            scoreCount += 3; // hệ số điểm học kì
            return (parseFloat(tk) / scoreCount).toFixed(2);
        }
        return 'x';
    }
    /*
     * Hàm tính điểm tổng kết tất cả
     */
    function caculateFinalScore(arrayTK) {
        let countSubject = arrayTK.length + 2;
        let totalScore = 0;
        arrayTK.forEach((e) => {
            if (e.SubjectID == 1 || e.SubjectID == 2) {
                totalScore += (parseFloat(e.Score.TK) * 2);
            }
            else {
                totalScore += parseFloat(e.Score.TK);
            }
        });
        return parseFloat(totalScore / countSubject).toFixed(2);
    }
    /*
     * Check có thể lên lớp k ?
     */
    function checkAbleToGradeUp(arrayTK) {
        let greaterThan50 = true;
        arrayTK.forEach((e) => {
            if (parseFloat(e.Score.TK) < 5.0) {
                greaterThan50 = false;
            }
        });
        return greaterThan50;
    }
</script>
<script>
    var list = studentToGradeUp;

    function constructTable(selector) {

        // Getting the all column names
        var cols = Headers(list, selector);
        // Traversing the JSON data
        for (var i = 0; i < list.length; i++) {
            var row = $('<tr/>');
            for (var colIndex = 0; colIndex < cols.length; colIndex++) {
                var val = list[i][cols[colIndex]];

                // If there is any key, which is matching
                // with the column name
                if (val == null) val = "";
                row.append($('<td/>').html(printData(val)));
            }

            // Adding each row to the table
            $(selector).append(row);
        }
    }

    function Headers(list, selector) {
        var columns = [];
        var header = $('<tr/>');

        for (var i = 0; i < list.length; i++) {
            var row = list[i];
            for (var k in row) {
                if ($.inArray(k, columns) == -1) {
                    columns.push(k);
                    // Creating the header
                    header.append($('<th/>').html(printHeader(k)));
                }
            }
        }

        // Appending the header to the table
        $(selector).append(header);
        return columns;
    }
    function printData(data) {
        if (typeof data == "boolean") {
            if (data == true) {
                return "Có";
            }
            return "Không";
        }
        return data;
        
    }
    function printHeader(data) {
        if (data == "studentName") {
            
            return "Tên Học Sinh";
        }
        if (data == "studentID") {
            return "ID";
        }
        if (data == "canGradeUp") {
            return "Đủ điều kiện lên lớp ?";
        }
        return data;
    }
</script>  
<script>
    function updateGradeUpStatus() {
        $("#overlay").fadeIn();
        let lstStudent = studentToGradeUp.map((item) => {
            return { studentID: item.studentID, canGradeUp: item.canGradeUp }
        });
        axios.post("/HeadMaster/UpdateGradeUpStatus", { studentList: lstStudent }).then(resp => {
            swal("Thành công", resp.data, "success");
            $("#overlay").fadeOut();
        }).catch((e) => {
            swal("Lỗi", "Lỗi hệ thống", "error");
            $("#overlay").fadeOut();
        })
    }
</script>