
@{
    ViewBag.Title = "Quản lý giáo viên";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@Html.Partial("_PartialGrid")
<div class="container-fluid" style="margin-top:15px;padding-top:15px;">
    <h3>Quản lý giáo viên</h3>
    <div class="card-header">
        <div class="row mb-2">
            <div class="col-md-3">
                Trường:
                @Html.DropDownList("SchoolID", (IEnumerable<SelectListItem>)ViewBag.SchoolList, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                Lớp:
                @Html.DropDownList("ClassID", (IEnumerable<SelectListItem>)ViewBag.Class, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                Niên khóa:
                @Html.DropDownList("ConfigureID", (IEnumerable<SelectListItem>)ViewBag.Config, new { @class = "form-control" })
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-8">
                        <form name="fsearch">
                            Tìm theo giáo viên:
                            <input name="steacherName" id="steacherName" class="form-control" type="text" placeholder="Nhập tên giáo viên" />
                        </form>
                    </div>
                    <div class="col-md-4 mt-4">
                        <button onclick="search()" class="btn btn-outline-primary">Tìm</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-5 pt-4">
                <button class="btn btn-outline-danger" onclick="WarnDelete()">Xóa</button>
                <button class="btn btn-outline-primary" onclick="ChangePassWord()">Đổi mật khẩu</button>
                <button class="btn btn-outline-warning" onclick="Submit()">Cập nhật</button>
            </div>
        </div>
    </div>
    <div id="myGrid" style="height: 600px;width:100%;" class="ag-theme-balham"></div>


    <div class="modal fade" id="ChangePassModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Đổi mật khẩu: </h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <p id="stdShow" class="align-content-center"></p>
                    <div class="row mb-2">
                        <p class="mt-2 col-3">Mật khẩu mới:</p>
                        <input type="password" class="form-control col-9" name="NewPass" id="NewPass" />
                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" onclick="ChangePassAJAX()" class="btn btn-danger">Đổi</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
                </div>

            </div>
        </div>
    </div>

</div>

<script>
    var Teacher = {};
    var CurrentData = [];
    var SwitchModal = $('#SwitchClassModal');
    var ChangePassModal = $('#ChangePassModal');
    // specify the columns
    var columnDefs = [
        { headerName: "Email", field: "Identifier", editable: true, resizable: true },
        { headerName: "Họ và tên", field: "FullName", editable: true, resizable: true },
        {
            headerName: "Ngày sinh",
            field: "DateOfBirth",
            editable: true, resizable: true,
            cellEditor: DateEditor,
        },
        {
            headerName: "Môn học",
            field: "Subject",
            editable: false, resizable: true,
        },
        {
            headerName: "Là chủ nhiệm",
            field: "IsHomeTeacher",
            editable: false, resizable: true,
        },
        {
            headerName: "Giới tính", field: "Gender",
            editable: true, resizable: true,
            cellEditor: 'agSelectCellEditor',
            cellEditorParams: {
                values: ['Nam', 'Nữ']
            }
        },
        {
            headerName: "Trạng thái", field: "Status",
            editable: true, resizable: true,
            cellEditor: 'agSelectCellEditor',
            cellEditorParams: {
                values: ['Non-Active', 'Active']
            }
        },
    ];

    // specify the data
    var rowData = [];

    // let the grid know which columns and what data to use
    var gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        rowSelection: 'single',
        onSelectionChanged: onSelectionChanged,
        headerHeight: '28px'
    };
    function onSelectionChanged() {
        var selectedRows = gridOptions.api.getSelectedRows();
        Teacher.Identifier = selectedRows[0].Identifier;
        Teacher.FullName = selectedRows[0].FullName;
    }
    // lookup the container we want the Grid to use
    var eGridDiv = document.querySelector('#myGrid');

    // create the grid passing in the div to use together with the columns & data we want to use
    new agGrid.Grid(eGridDiv, gridOptions);
    function RemoveSelected() {
        var selectedData = gridOptions.api.getSelectedRows();
        var res = gridOptions.api.updateRowData({ remove: selectedData });
        console.log(res);
    }

</script>
<script>
    var schoolID, classID, Config;
    var confirmModal = $('#deleteModal');
    $(document).ready(function () {
        
        //$("input[name=steacherName]").val("");
        schoolID = $('#SchoolID').children("option:selected").val();
        classID = $('#ClassID').children("option:selected").val();
        Config = $('#ConfigureID').children("option:selected").val();
        GetData();
    });
    $('#ClassID').change(() => {
        classID = $('#ClassID').children("option:selected").val();
        GetData();
    });
    $('#ConfigureID').change(() => {
        GetData();
    });
    $('#SchoolID').change(() => {
        ClearData();
        schoolID = $('#SchoolID').children("option:selected").val();
        GetClass(schoolID);
        classID = $('#ClassID').children("option:selected").val();
    });
    $('#SchoolSwitch').change(() => {
        let sID = $('#SchoolSwitch').children("option:selected").val();
        GetClassModal(sID);
    });
</script>
<script>
    // Các function utilities
    function getAllRows() {
        let rowData = [];
        gridOptions.api.forEachNode(node => rowData.push(node.data));
        return rowData.map((e) => {
            return { ...e, Gender: e.Gender == 'Nam' ? 0 : 1, Status: e.Status === 'Non-Active' ? 0 : 1, IsHomeTeacher: e.IsHomeTeacher === "Yes" ? true : false }
        });
    }
    function compareData(arr1, arr2) {
        console.log(arr1);
        console.log(arr2);
        let diff = arr1.filter((e) => {
            return arr2.some((e2) => e2.Identifier === e.Identifier
                && e2.FullName === e.FullName
                && e2.DateOfBirth === e.DateOfBirth
                && e2.Gender === e.Gender
                && e2.Status === e.Status
            )
        });
        return diff.length === arr1.length;
    }

    //Check ko bỏ trống trường nào
    function Validate(dat) {
        let re = dat.every((e) => {
            return Object.values(e).every((sub) => {
                ///console.log(sub);
                return (sub || sub === 0 || sub === false) ? true : false;
            })
        });
        return re;
    }
    function ToJavaScriptDate(value) {
        // Trả về chuỗi ngày tháng dạng MM//DD/YYYY TỪ dạng /Date(1525730400000)//
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    }
</script>
<script>
    function ClearData() {
        gridOptions.api.setRowData([]);
    }
    var GetClass = function (id) {
        $.ajax({
            type: "POST",
            url: '/AdTeacher/GetClassBySchoolID',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ id: id }),
            dataType: "json",
            success: function (data) {
                $('#ClassID').empty();
                if (data.length > 0) {
                    var count = 1;
                    data.forEach((e) => {
                        $('#ClassID').append('<option value=' + e.ClassID + ' ' + (count === 1 ? 'selected' : '') + '>' + e.ClassName + '</option>');
                        count++;
                    });
                }
                GetData();
            },
            error: function () {
                var notify = $.notify('<strong>Lỗi</strong><br/>Lỗi hệ thống<br />', {
                    type: 'pastel-danger',
                    allow_dismiss: false,
                    timer: 1000,
                });
            }
        });
    }
    var GetClassModal = function (id) {
        axios.post('/AdStudent/GetClassBySchoolID', { id: id }).then(resp => {
            $('#ClassSwitch').empty();
            if (resp.data.length > 0) {
                var check = true;
                resp.data.forEach((e) => {
                    $('#ClassSwitch').append('<option value=' + e.ClassID + ' ' + (check === true ? 'selected' : '') + '>' + e.ClassName + '</option>');
                    check = false;
                });
            }
        }).catch((e) => {
            var notify = $.notify('<strong>Lỗi</strong><br/>Lỗi hệ thống<br />', {
                type: 'pastel-danger',
                allow_dismiss: false,
                timer: 1000,
            });
        });
    }
    function GetData() {
        classID = $('#ClassID').children("option:selected").val();
        Config = $('#ConfigureID').children("option:selected").val();
        schoolID = $('#SchoolID').children("option:selected").val();
        axios.post('/AdTeacher/GetTeacher', { ClassID: classID, ConfigureID: Config, SchoolID: schoolID }).then(resp => {
            ClearData();
            let newdata = [];
            resp.data.forEach((e) => {
                newRow = {
                    Identifier: e.Identifier,
                    FullName: e.FullName,
                    DateOfBirth: ToJavaScriptDate(e.DateOfBirth),
                    Subject: e.SubjectName,
                    IsHomeTeacher: e.IsHomeTeacher ? "Yes" : "No", 
                    Gender: e.Gender == 0 ? 'Nam' : 'Nữ',
                    Status: e.Status == 0 ? 'Non-Active' : 'Active'
                };
                newdata.push({ ...e, DateOfBirth: ToJavaScriptDate(e.DateOfBirth) });
                gridOptions.api.updateRowData({ add: [newRow] });
            });
            CurrentData = newdata;
            gridOptions.api.sizeColumnsToFit();
        }).catch((err) => {
            //swal("Lỗi", "Lỗi hệ thống", "error");
            var notify = $.notify('<strong>Lỗi</strong><br/>Lỗi hệ thống<br />', {
                type: 'pastel-danger',
                allow_dismiss: false,
                timer: 1000,
            });
        });

    }
    function WarnDelete() {
        if (!Teacher.FullName) {
            swal('Lỗi', 'Bạn chưa chọn giáo viên', 'warning');
        }
        else {
            swal({
                title: "Bạn chắc chứ ?",
                text: "Bạn có chắc muốn xóa giáo viên: " + Teacher.FullName,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        $.ajax({
                            type: "POST",
                            url: '/AdTeacher/DeleteTeacher',
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify({ Identifier: Teacher.Identifier }),
                            dataType: "json",
                            success: function (data) {
                                ClearData();
                                swal("Thành công", data, "success");
                                GetData();
                            },
                            error: function () {
                                swal("Lỗi", "Lỗi hệ thống", "error");
                            }
                        });

                    } else {
                    }
                });
        }
    }
    var Submit = function () {
        $('#overlay').fadeIn();
        var data = getAllRows();
        var checkFill = Validate(data);
        //Check đã sửa gì hay chưa
        var isUpdated = !compareData(CurrentData, data);
        if (data.length > 0 && checkFill === true && isUpdated === true) {
            Config = $('#ConfigureID').children("option:selected").val();
            classID = $('#ClassID').children("option:selected").val();
            axios.post('/AdTeacher/UpdateBatchTeacher', { teachers: data }).then(resp => {
                swal('Thành công', resp.data.message, 'success');
                GetData();
                $('#overlay').fadeOut();
            }).catch((e) => {
                swal('Lỗi', 'Đã xảy ra lỗi', 'error');
                $('#overlay').fadeOut();
            });
        }
        else {
            if (getAllRows().length === 0) {
                swal("Lỗi", "Chưa có học sinh để cập nhật", "error");
            }
            else if (!isUpdated) {
                swal("Lỗi", "Bạn chưa chỉnh sửa gì", "warning");
            }
            else if (!checkFill) {
                swal("Lỗi", "Bạn nhập chưa đủ thông tin", "warning");
            }
            $('#overlay').fadeOut();
        }
    }
    function ChangePassWord() {
        if (!Teacher.FullName) {
            swal('Lỗi', 'Bạn chưa chọn giáo viên', 'warning');
        }
        else {
            $('#NewPass').val('');
            ChangePassModal.find('#stdShow').text(Teacher.FullName);
            ChangePassModal.modal('show');
        }
    }
    function ChangePassAJAX() {
        var pass = $('#NewPass').val();
        axios.post('/Auth/ChangeUserPass', { Identifier: Teacher.Identifier, NewPass: pass }).then(resp => {
            swal("Thành công", "Đổi mật khẩu thành công cho User : " + Teacher.FullName, "success");
            ChangePassModal.modal('hide');
        }).catch((er) => {
            swal("Lỗi", "Lỗi hệ thống", "error");
            ChangePassModal.modal('hide');
        })
    }
</script>
<script>
    function search() {
        classID = $('#ClassID').children("option:selected").val();
        Config = $('#ConfigureID').children("option:selected").val();
        schoolID = $('#SchoolID').children("option:selected").val();
        let name = $('#steacherName').val()
        axios.post('/AdTeacher/GetTeacherByName', {name:name, ClassID: classID, ConfigureID: Config, SchoolID: schoolID }).then(resp => {
            ClearData();
            let newdata = [];
            resp.data.forEach((e) => {
                newRow = {
                    Identifier: e.Identifier,
                    FullName: e.FullName,
                    DateOfBirth: ToJavaScriptDate(e.DateOfBirth),
                    Subject: e.SubjectName,
                    IsHomeTeacher: e.IsHomeTeacher ? "Yes" : "No", 
                    Gender: e.Gender == 0 ? 'Nam' : 'Nữ',
                    Status: e.Status == 0 ? 'Non-Active' : 'Active'
                };
                newdata.push({ ...e, DateOfBirth: ToJavaScriptDate(e.DateOfBirth) });
                gridOptions.api.updateRowData({ add: [newRow] });
            });
            CurrentData = newdata;
            gridOptions.api.sizeColumnsToFit();
        }).catch((err) => {
            //swal("Lỗi", "Lỗi hệ thống", "error");
            var notify = $.notify('<strong>Lỗi</strong><br/>Lỗi hệ thống<br />', {
                type: 'pastel-danger',
                allow_dismiss: false,
                timer: 1000,
            });
        });
    }
</script>